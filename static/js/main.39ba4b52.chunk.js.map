{"version":3,"sources":["redux/constants.ts","components/Form.tsx","components/Tracker.tsx","helper.ts","App.tsx","redux/actionCreator.ts","redux/trackersReducer.ts","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["ADD_TRACKER","DELETE_TRACKER","SAVE_TIME_TRACKER","TOGGLE_TRACKER","useStyles","makeStyles","theme","input","borderRadius","fontSize","height","marginBottom","breakpoints","down","icon","width","color","green","button","position","left","Form","addTracker","useState","value","setValue","classes","onSubmit","e","preventDefault","noValidate","autoComplete","TextField","id","fullWidth","variant","placeholder","onChange","target","InputProps","endAdornment","IconButton","size","type","className","listItem","display","padding","listItemContainer","flexGrow","flexShrink","justifyContent","minWidth","listItemText","overflow","textOverflow","Tracker","seconds","settings","remove","toggle","saveTime","name","isTicking","time","localTime","setTime","handleUnload","closedTime","Date","now","returnValue","useEffect","timer","setInterval","prev","clearInterval","window","addEventListener","removeEventListener","ListItem","divider","style","ListItemText","primary","Math","floor","map","v","join","ListItemIcon","onClick","container","maxWidth","title","margin","warning","textAlign","connect","state","trackers","payload","deleteTracker","toggleTracker","Container","Typography","align","List","Divider","length","reverse","tracker","savedStore","load","namespace","initialState","restProps","newTime","trackersReducer","action","newTracker","filter","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","save","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39ba4b52.chunk.js","sourcesContent":["export const ADD_TRACKER = 'ADD_TRACKER';\nexport const DELETE_TRACKER = 'DELETE_TRACKER';\nexport const SAVE_TIME_TRACKER = 'SAVE_TIME_TRACKER';\nexport const TOGGLE_TRACKER = 'TOGGLE_TRACKER';\n","import { FC, FormEvent, useState, ChangeEvent } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport PlayIcon from '@material-ui/icons/PlayCircleFilled';\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    borderRadius: '45px',\n    fontSize: '20px',\n    height: '55px',\n    marginBottom: '30px',\n    [theme.breakpoints.down('xs')]: {\n      borderRadius: '35px',\n      fontSize: '17px',\n      height: '45px',\n      marginBottom: '25px',\n    },\n  },\n  icon: {\n    height: '55px',\n    width: '55px',\n    color: green[500],\n    [theme.breakpoints.down('xs')]: {\n      height: '45px',\n      width: '45px',\n    },\n  },\n  button: {\n    position: 'relative',\n    left: '15px',\n  },\n}));\n\ninterface FormProps {\n  addTracker: (value: string) => void;\n}\n\nconst Form: FC<FormProps> = ({ addTracker }) => {\n  const [value, setValue] = useState('');\n  const classes = useStyles();\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    addTracker(value);\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} noValidate autoComplete='off'>\n      <TextField\n        id='outlined-basic'\n        fullWidth={true}\n        variant='outlined'\n        placeholder='Enter tracker name'\n        value={value}\n        onChange={handleChange}\n        InputProps={{\n          endAdornment: (\n            <IconButton size='small' type='submit' className={classes.button}>\n              <PlayIcon fontSize='large' className={classes.icon} />\n            </IconButton>\n          ),\n          className: classes.input,\n        }}\n      />\n    </form>\n  );\n};\n\nexport default Form;\n","import { FC, useEffect, useState } from 'react';\nimport { ITracker, TrackerActionType } from '../types';\nimport { convertTime } from '../helper';\n\nimport {\n  IconButton,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n} from '@material-ui/core';\nimport PauseIcon from '@material-ui/icons/PauseCircleOutline';\nimport PlayIcon from '@material-ui/icons/PlayCircleOutline';\nimport RemoveIcon from '@material-ui/icons/RemoveCircleOutline';\nimport { green } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme) => ({\n  listItem: () => ({\n    display: 'flex',\n    padding: '5px 10px',\n    [theme.breakpoints.down('xs')]: {\n      padding: '5px',\n      fontSize: '15px',\n    },\n  }),\n  listItemContainer: {\n    flexGrow: 0,\n    flexShrink: 0,\n    justifyContent: 'center',\n    minWidth: 0,\n    fontSize: '18px',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '12px',\n    },\n  },\n\n  listItemText: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    padding: '0 10px 0 0',\n  },\n}));\n\ninterface TrackerProps {\n  remove: (id: number) => TrackerActionType;\n  toggle: (id: number) => TrackerActionType;\n  saveTime: (\n    time: number,\n    id: number,\n    closedTime: number | null,\n  ) => TrackerActionType;\n  settings: ITracker;\n}\n\nconst Tracker: FC<TrackerProps> = ({ settings, remove, toggle, saveTime }) => {\n  const { name, id, isTicking, time } = settings;\n\n  const [localTime, setTime] = useState(time);\n  const classes = useStyles({ isTicking });\n\n  const handleToggle = () => {\n    toggle(id);\n  };\n\n  const handleRemove = () => {\n    remove(id);\n  };\n\n  const handleUnload = (e: BeforeUnloadEvent): void => {\n    e.preventDefault();\n    const closedTime: number | null = isTicking ? Date.now() : null;\n    saveTime(localTime, id, closedTime);\n    e.returnValue = '';\n  };\n\n  useEffect(() => {\n    if (!isTicking) return;\n\n    let timer: ReturnType<typeof setInterval>;\n    timer = setInterval(() => {\n      setTime((prev) => prev + 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [isTicking]);\n\n  useEffect(() => {\n    window.addEventListener('beforeunload', handleUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleUnload);\n    };\n  }, []);\n\n  return (\n    <ListItem\n      className={classes.listItem}\n      divider\n      style={{ color: isTicking ? green[500] : '' }}\n    >\n      <ListItemText\n        primary={name}\n        classes={{ primary: classes.listItemText }}\n      />\n      <ListItemText\n        primary={convertTime(localTime)}\n        className={classes.listItemContainer}\n      />\n      <ListItemIcon className={classes.listItemContainer}>\n        <IconButton size='small' onClick={handleToggle}>\n          {isTicking ? (\n            <PauseIcon fontSize='large' />\n          ) : (\n            <PlayIcon fontSize='large' />\n          )}\n        </IconButton>\n      </ListItemIcon>\n      <ListItemIcon className={classes.listItemContainer}>\n        <IconButton size='small' onClick={handleRemove}>\n          <RemoveIcon color='secondary' fontSize='large' />\n        </IconButton>\n      </ListItemIcon>\n    </ListItem>\n  );\n};\n\nexport default Tracker;\n","import { ITracker } from './types';\n\nexport const convertTime = (seconds: number): string => {\n  var hr = Math.floor(seconds / 3600);\n  var min = Math.floor(seconds / 60) % 60;\n  var sec = seconds % 60;\n\n  return [hr, min, sec].map((v) => (v < 10 ? '0' + v : v)).join(':');\n};\n\nexport const setRightTrackerTime = (trackers: ITracker[]): ITracker[] => {\n  return trackers.map((tracker: any) => {\n    const { closedTime, ...restProps } = tracker;\n    if (closedTime) {\n      const newTime =\n        Math.floor((Date.now() - closedTime) / 1000) + tracker.time;\n      return { ...restProps, time: newTime };\n    }\n    return tracker;\n  });\n};\n","import { FC } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  addTracker,\n  deleteTracker,\n  saveTime,\n  toggleTracker,\n} from './redux/actionCreator';\nimport { ITracker, TrackerActionType } from './types';\n\nimport { Container, Divider, List, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Form from './components/Form';\nimport Tracker from './components/Tracker';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    maxWidth: '560px',\n    padding: '0 5px',\n  },\n  title: {\n    margin: '70px 0',\n    [theme.breakpoints.down('xs')]: {\n      margin: '40px 0',\n    },\n  },\n  warning: {\n    fontSize: '17px',\n    textAlign: 'center',\n    padding: '20px',\n  },\n}));\n\ninterface RootState {\n  trackers: ITracker[];\n}\n\ninterface AppProps {\n  trackers: ITracker[];\n  addTracker: (name: string) => TrackerActionType;\n  deleteTracker: (id: number) => TrackerActionType;\n  toggleTracker: (id: number) => TrackerActionType;\n  saveTime: (\n    time: number,\n    id: number,\n    closedTime: number | null,\n  ) => TrackerActionType;\n}\n\nconst App: FC<AppProps> = ({\n  trackers,\n  addTracker,\n  deleteTracker,\n  saveTime,\n  toggleTracker,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth='lg' className={classes.container}>\n      <Typography variant='h1' align='center' className={classes.title}>\n        tracker\n      </Typography>\n      <Form addTracker={addTracker} />\n      <List>\n        <Divider />\n        {trackers.length ? (\n          [...trackers]\n            .reverse()\n            .map((tracker) => (\n              <Tracker\n                key={tracker.id}\n                settings={tracker}\n                remove={deleteTracker}\n                toggle={toggleTracker}\n                saveTime={saveTime}\n              />\n            ))\n        ) : (\n          <p className={classes.warning}>No trackers yet!</p>\n        )}\n      </List>\n    </Container>\n  );\n};\n\nexport default connect((state: RootState) => ({ trackers: state.trackers }), {\n  addTracker,\n  deleteTracker,\n  saveTime,\n  toggleTracker,\n})(App);\n","import {\n  ADD_TRACKER,\n  DELETE_TRACKER,\n  SAVE_TIME_TRACKER,\n  TOGGLE_TRACKER,\n} from './constants';\nimport { TrackerActionType } from './../types';\n\nexport const addTracker = (name: string): TrackerActionType => ({\n  type: ADD_TRACKER,\n  payload: {\n    name,\n  },\n});\n\nexport const toggleTracker = (id: number): TrackerActionType => ({\n  type: TOGGLE_TRACKER,\n  payload: {\n    id,\n  },\n});\n\nexport const deleteTracker = (id: number): TrackerActionType => ({\n  type: DELETE_TRACKER,\n  payload: {\n    id,\n  },\n});\n\nexport const saveTime = (\n  time: number,\n  id: number,\n  closedTime: number | null,\n): TrackerActionType => ({\n  type: SAVE_TIME_TRACKER,\n  payload: {\n    id,\n    time,\n    closedTime,\n  },\n});\n","import { load } from 'redux-localstorage-simple';\nimport { setRightTrackerTime } from '../helper';\nimport { ITracker, TrackerActionType } from '../types';\nimport {\n  ADD_TRACKER,\n  DELETE_TRACKER,\n  SAVE_TIME_TRACKER,\n  TOGGLE_TRACKER,\n} from './constants';\n\nconst savedStore: any = load({ namespace: 'tracker' });\n\nconst initialState: Array<ITracker> =\n  savedStore && savedStore.trackers\n    ? setRightTrackerTime(savedStore.trackers)\n    : [];\n\nconst trackersReducer = (\n  state = initialState,\n  action: TrackerActionType,\n): ITracker[] => {\n  switch (action.type) {\n    case ADD_TRACKER:\n      let newTracker = {\n        id: state.length ? state.length : 0,\n        name:\n          action.payload.name ||\n          `No name tracker #${state.length ? state.length + 1 : 1}`,\n        isTicking: true,\n        time: 0,\n      };\n      return [...state, newTracker];\n    case TOGGLE_TRACKER:\n      return [...state].map((tracker) => {\n        if (tracker.id === action.payload.id) {\n          return { ...tracker, isTicking: !tracker.isTicking };\n        }\n        return tracker;\n      });\n    case DELETE_TRACKER:\n      return [...state].filter((tracker) => tracker.id !== action.payload.id);\n    case SAVE_TIME_TRACKER:\n      return [...state].map((tracker) => {\n        if (tracker.id === action.payload.id) {\n          return {\n            ...tracker,\n            time: action.payload.time,\n            closedTime: action.payload.closedTime,\n          };\n        }\n        return tracker;\n      });\n    default:\n      return state;\n  }\n};\n\nexport default trackersReducer;\n","import { combineReducers } from 'redux';\nimport trackersReducer from './trackersReducer';\n\nconst rootReducer = combineReducers({ trackers: trackersReducer });\n\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport { save } from 'redux-localstorage-simple';\nimport rootReducer from './rootReducer';\n\nexport const store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(save({ namespace: 'tracker' })),\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n      (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}